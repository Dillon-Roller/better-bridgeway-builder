(()=>{"use strict";var t={251:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Player=void 0;class s{constructor(t,e,s,i,h="green"){this.x=t,this.y=e,this.width=s,this.height=i,this.color=h}draw(t){t.fillStyle=this.color,t.fillRect(this.x,this.y,this.width,this.height)}onCollisionDetected(){return new s(this.x,this.y,this.width,this.height,"red")}moveUp(){return new s(this.x,this.y-10,this.width,this.height,this.color)}moveDown(){return new s(this.x,this.y+10,this.width,this.height,this.color)}moveLeft(){return new s(this.x-10,this.y,this.width,this.height,this.color)}moveRight(){return new s(this.x+10,this.y,this.width,this.height,this.color)}}e.Player=s},728:(t,e)=>{var s;Object.defineProperty(e,"__esModule",{value:!0}),e.Street=e.Lane=e.Obstacle=e.LaneDirection=void 0,(s=e.LaneDirection||(e.LaneDirection={}))[s.LEFT=-1]="LEFT",s[s.RIGHT=1]="RIGHT";class i{constructor(t,e,s,i,h,n="black"){this.x=t,this.width=e,this.height=s,this.speed=i,this.direction=h,this.color=n}moveObstacle(){const t=this.x+this.speed*this.direction;return new i(t,this.width,this.height,this.speed,this.direction,this.color)}}e.Obstacle=i;class h{constructor(t,e=50,s,i,h=[]){this.direction=t,this.laneWidth=e,this.streetLength=s,this.centerY=i,this.obstacles=h}addObstacle(t){const e=[...this.obstacles,t];return new h(this.direction,this.laneWidth,this.streetLength,this.centerY,e)}updateObstacles(){const t=this.obstacles.map((t=>t.moveObstacle())).filter((t=>-1===this.direction?t.x+t.width>0:t.x<this.streetLength));return new h(this.direction,this.laneWidth,this.streetLength,this.centerY,t)}draw(t){const e=this.centerY-this.laneWidth/2;t.strokeStyle="black",t.lineWidth=2,t.beginPath(),t.moveTo(0,e),t.lineTo(this.streetLength,e),t.stroke(),t.beginPath(),t.moveTo(0,e+this.laneWidth),t.lineTo(this.streetLength,e+this.laneWidth),t.stroke();for(const s of this.obstacles){t.fillStyle=s.color;const i=.75*this.laneWidth,h=i*(s.height/s.width);t.fillRect(s.x,e+(this.laneWidth-h)/2,i,h)}}detectCollision(t,e){const s=this.centerY-this.laneWidth/2;for(const i of this.obstacles)if(t>i.x&&t<i.x+i.width&&e>s+(this.laneWidth-i.height)/2&&e<s+(this.laneWidth-i.height)/2+i.height)return!0;return!1}}e.Lane=h;class n{constructor(t=0,e=600,s=[]){this.topOfStreetY=t,this.streetLength=e,this.lanes=s}addLane(t,e){const s=[...this.lanes,new h(t,e,this.streetLength,this.getCenterY(e))];return new n(this.topOfStreetY,this.streetLength,s)}getCenterY(t){const e=this.getStreetWidth();return this.topOfStreetY+e+t/2}generateObstacles(){const t=Math.floor(Math.random()*this.lanes.length),e=this.lanes.map(((e,s)=>{if(s===t){const t=40,s=3*t,h=-1===e.direction?e.streetLength+s:0-s;return e.addObstacle(new i(h,t,25,5,e.direction))}return e}));return new n(this.topOfStreetY,this.streetLength,e)}updateObstacles(){const t=this.lanes.map((t=>t.updateObstacles()));return new n(this.topOfStreetY,this.streetLength,t)}detectCollision(t,e){for(const s of this.lanes)if(s.detectCollision(t,e))return!0;return!1}draw(t){for(const e of this.lanes)e.draw(t)}getStreetWidth(){return this.lanes.reduce(((t,e)=>t+e.laneWidth),0)}}e.Street=n}},e={};function s(i){var h=e[i];if(void 0!==h)return h.exports;var n=e[i]={exports:{}};return t[i](n,n.exports,s),n.exports}(()=>{const t=s(728),e=s(251);class i{constructor(t,e){this.x=t,this.y=e}}class h{constructor(s){this.playerDestination=null,this.ctx=s,this.topOfStreetY=n.height/10,this.isPlayerSquashed=!1;const i=n.width;this.street=new t.Street(this.topOfStreetY,i).addLane(-1,50).addLane(1,50).addLane(-1,120).addLane(1,120),this.player=new e.Player(i/2,this.street.getStreetWidth()+20+this.topOfStreetY,20,20),document.addEventListener("keydown",this.handleKeyDown.bind(this)),document.addEventListener("mousedown",this.handleMouseDown.bind(this)),document.addEventListener("mouseup",this.handleMouseUp.bind(this)),setInterval((()=>{this.street=this.street.updateObstacles(),this.updateCanvas()}),50),setInterval((()=>{this.street=this.street.generateObstacles()}),1e3)}handleKeyDown(t){if(!this.isPlayerSquashed){switch(t.code){case"ArrowUp":this.player=this.player.moveUp();break;case"ArrowDown":this.player=this.player.moveDown();break;case"ArrowLeft":this.player=this.player.moveLeft();break;case"ArrowRight":this.player=this.player.moveRight()}this.updateCanvas()}}handleMouseDown(t){const e=t.clientX-n.offsetLeft,s=t.clientY-n.offsetTop;this.playerDestination=new i(e,s)}handleMouseUp(t){this.playerDestination=null}navigateToDestination(){if(!this.isPlayerSquashed&&null!==this.playerDestination){const t=this.playerDestination.x,e=this.playerDestination.y,s=t-this.player.x,i=e-this.player.y;Math.abs(s)>Math.abs(i)?this.player=s>0?this.player.moveRight():this.player.moveLeft():this.player=i>0?this.player.moveDown():this.player.moveUp()}}updateCanvas(){this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.street=this.street.updateObstacles(),this.navigateToDestination(),this.street.detectCollision(this.player.x,this.player.y)&&(this.player=this.player.onCollisionDetected(),this.isPlayerSquashed=!0),this.player.draw(this.ctx),this.ctx.fillText(`x: ${this.player.x}, y: ${this.player.y}`,this.player.x,this.player.y-10),this.street.draw(this.ctx)}}const n=document.getElementById("gameCanvas");if(n){const t=n.getContext("2d");t?new h(t):console.error("Canvas context is null")}else console.error("Canvas element is null")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,